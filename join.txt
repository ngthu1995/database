1. How do you find related data held in two separate data tables?
We can use JOIN method using foreign and primary key.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each
INNER JOIN: the default method of combining data through shared attributes.
Ex: combine purchase id from orders table and customer name from users table

LEFT OUTER JOIN: the table will have every row of first table
Ex: combine studen name from class table and their favorite class from subjects table

RIGHT OUTER JOIN: the table will have every row of second table
Ex: combine participated students from list table and activities from clubs table

3. Define primary key and foreign key. Give a real-world example for each.
Primary key: a unique identifier for each row in a database table.
Foreign key: the primary key of one table that is included as a non-unique attribute in another table.
Ex: teacher id is unique in teachers table but non-unique when compare to employee id from employees table

4. Define aliasing.
Aliasing : the technique of creating short variable names, usually a single letter, to replace the table name in a query.

5. 
SELECT professor.name, compensation.salary, compensation.vacation_days 
FROM professor AS p
JOIN compensation AS c
ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN?
We use natural join when it has columns with the same name of associated tables will appear once only.
companyID column would be name the same in company list table as well as in distributor table.

7. List all employees and all shifts.
SELECT employees.id, employees.name, shifts.date, shifts.start_time, shifts.end_time
FROM scheduled_shifts
JOIN employees ON scheduled_shifts.employee_id = employees.id 
JOIN shifts ON scheduled_shifts.shift_id = shifts.id;

8. Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
SELECT volunteers.first_name, volunteer.last_name, volunteers.address, volunteers.phone_number, volunteers.available_to_foster, volunteer.foster_dog_id, dogs.name
FROM volunteers
LEFT OUTER JOIN dogs ON volunteers.foster_dog_id = dogs.id;

The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
SELECT cats.name, adopters.name, cats.intake_date
FROM cats
JOIN cat_adoptions ON cats.id = cat_adoptions.cat_id
JOIN adopters ON cat_adoptions.adopter_id = adopters.id
WHERE cat_adoptions.date >= (CURRENT_DATE - INTERVAL '30 DAYS');

Create a list of adopters who have not yet chosen a dog to adopt.
SELECT adopters.first_name, adopters.last_name
FROM adopters
JOIN dogs ON adopters.id != dog_adoptions.adopter_id;

Lists of all cats and all dogs who have not been adopted.
SELECT dogs.name
FROM dogs
JOIN dog_adoptions ON dogs.id != dog_adoptions.dog_id;
UNION ALL
SELECT cats.name
FROM cats
JOIN cat_adoptions ON cats.id != cat_adoptions.cat_id;

The name of the person who adopted Rosco.
SELECT adopters.first_name, adopters.last_name
FROM adopters
JOIN dog_adoptions ON adopters.id = dog_adoptions.adopter_id
JOIN dogs ON dog_adoptions.dog_id = dogs.id
WHERE dogs.name = 'Rosso';

9. To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".
SELECT patrons.name, holds.rank
FROM holds 
JOIN patrons ON patrons.id = holds.patron_id
JOIN books ON books.isbn = holds.isbn
WHERE books.title = 'Advanced Potion-Making';

List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

SELECT patrons.name,
MAX((CASE WHEN books.title IN (SELECT title FROM books WHERE transactions.checked_in_date IS NULL) THEN books.title ELSE NULL END))
FROM patrons
INNER JOIN transactions ON transactions.patron_id = patrons.id
INNER JOIN books ON books.isbn = transactions.isbn
GROUP BY patrons.name;